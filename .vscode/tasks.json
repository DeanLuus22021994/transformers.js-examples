{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Run All Tests",
			"type": "shell",
			"command": "echo '[INFO] Starting all tests...' && node --experimental-vm-modules --max-old-space-size=8192 node_modules/jest/bin/jest.js || (echo '[FATAL] Tests failed' && exit 1)",
			"group": {
				"kind": "test",
				"isDefault": true
			},
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Run Tests with Coverage",
			"type": "shell",
			"command": "echo '[INFO] Running tests with coverage...' && node --experimental-vm-modules --max-old-space-size=8192 node_modules/jest/bin/jest.js --coverage || (echo '[FATAL] Coverage tests failed' && exit 1)",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Run GPU Tests",
			"type": "shell",
			"command": "echo '[INFO] Running GPU tests...' && npm run test:gpu || (echo '[FATAL] GPU tests failed' && exit 1)",
			"group": "test",
			"options": {
				"env": {
					"WEBGPU_FORCE_DISCRETE": "1",
					"GPU_MEMORY_LIMIT": "4096"
				}
			},
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Run Non-GPU Tests",
			"type": "shell",
			"command": "echo '[INFO] Running non-GPU tests...' && npm run test:no-gpu || (echo '[FATAL] Non-GPU tests failed' && exit 1)",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Docker: Build Test Containers",
			"type": "shell",
			"command": "echo '[INFO] Building Docker test containers...' && npm run docker:build || (echo '[FATAL] Docker build failed' && exit 1)",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Docker: Run All Tests",
			"type": "shell",
			"command": "echo '[INFO] Running all Docker tests...' && npm run docker:test:all || (echo '[FATAL] Docker tests failed' && exit 1)",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Docker: Run Tests with Coverage",
			"type": "shell",
			"command": "echo '[INFO] Running Docker tests with coverage...' && npm run docker:test:coverage || (echo '[FATAL] Docker coverage tests failed' && exit 1)",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Docker: Run GPU Tests",
			"type": "shell",
			"command": "echo '[INFO] Running Docker GPU tests...' && npm run docker:test:gpu || (echo '[FATAL] Docker GPU tests failed' && exit 1)",
			"group": "test",
			"options": {
				"env": {
					"NVIDIA_VISIBLE_DEVICES": "all",
					"NVIDIA_DRIVER_CAPABILITIES": "compute,utility,graphics"
				}
			},
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Docker: Run Non-GPU Tests",
			"type": "shell",
			"command": "echo '[INFO] Running Docker non-GPU tests...' && npm run docker:test:no-gpu || (echo '[FATAL] Docker non-GPU tests failed' && exit 1)",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Build All Projects",
			"type": "shell",
			"command": "echo '[INFO] Building all projects...' && npm run build || (echo '[FATAL] Build failed' && exit 1)",
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Initialize Dev Container",
			"type": "shell",
			"command": "echo '[INFO] Initializing dev container...' && cd .devcontainer && docker-compose up -d || (echo '[FATAL] Dev container init failed' && exit 1)",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Build and Pull Submodules",
			"type": "shell",
			"command": "echo '[INFO] Building and pulling submodules...' && bash .devcontainer/scripts/clone_submodules.sh && bash .devcontainer/scripts/build_all.sh || (echo '[FATAL] Submodule build failed' && exit 1)",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Check GPU Status",
			"type": "shell",
			"command": "echo '[INFO] Checking GPU status...' && nvidia-smi || (echo '[WARNING] No GPU detected' && exit 0)",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Monitor GPU Usage",
			"type": "shell",
			"command": "echo '[INFO] Monitoring GPU usage...' && nvidia-smi -l 2 || (echo '[WARNING] GPU monitoring failed' && exit 0)",
			"isBackground": true,
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Optimize TypeScript Performance",
			"type": "shell",
			"command": "echo '[INFO] Optimizing TypeScript performance...' && npm run build -- --incremental || (echo '[FATAL] TypeScript optimization failed' && exit 1)",
			"group": "build",
			"problemMatcher": [
				"$tsc"
			]
		},
		{
			"label": "Clear TypeScript Cache",
			"type": "shell",
			"command": "echo '[INFO] Clearing TypeScript cache...' && rm -f .tsbuildinfo && npm run build || (echo '[FATAL] Clear cache failed' && exit 1)",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Start WebGPU Dev Server",
			"type": "shell",
			"command": "echo '[INFO] Starting WebGPU dev server...' && npx vite --force || (echo '[FATAL] Dev server failed' && exit 1)",
			"isBackground": true,
			"problemMatcher": {
				"pattern": {
					"regexp": ".",
					"file": 1
				},
				"background": {
					"activeOnStart": true,
					"beginsPattern": ".",
					"endsPattern": "ready in"
				}
			}
		},
		// Dev Debt Tasks
		{
			"label": "Process Technical Debt Files",
			"type": "shell",
			"command": "echo '[INFO] Processing Technical Debt files...' && ${command:debt-engine.processDevDebt} || (echo '[FATAL] Technical Debt processing failed' && exit 1)",
			"group": {
				"kind": "build",
				"isDefault": true
			},
			"presentation": {
				"reveal": "always",
				"panel": "new",
				"focus": true
			},
			"problemMatcher": []
		},
		{
			"label": "Create Debt Template",
			"type": "shell",
			"command": "echo '[INFO] Creating Debt template...' && ${command:debt-engine.createTemplate} || (echo '[FATAL] Debt template creation failed' && exit 1)",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "View Debt Engine Logs",
			"type": "shell",
			"command": "echo '[INFO] Viewing Debt Engine logs...' && ${command:debt-engine.viewLogs} || (echo '[FATAL] Viewing Debt Engine logs failed' && exit 1)",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		// Testing tasks with dependencies
		{
			"label": "GPU Test Pipeline",
			"dependsOn": [
				"Check GPU Status",
				"Build All Projects",
				"Run GPU Tests"
			],
			"dependsOrder": "sequence",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			}
		},
		{
			"label": "Docker: Full Test Pipeline",
			"dependsOn": [
				"Docker: Build Test Containers",
				"Docker: Run All Tests"
			],
			"dependsOrder": "sequence",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			}
		},
		{
			"label": "Setup Development Environment",
			"dependsOn": [
				"Initialize Dev Container",
				"Build and Pull Submodules"
			],
			"dependsOrder": "sequence",
			"problemMatcher": []
		},
		{
			"label": "Full Test Suite",
			"dependsOn": [
				"Docker: Build Test Containers",
				"All Tests"
			],
			"dependsOrder": "sequence"
		},
		{
			"label": "All Tests",
			"dependsOn": [
				"Run GPU Tests",
				"Run Non-GPU Tests"
			],
			"dependsOrder": "parallel"
		},
		{
			"label": "Container: Setup Environment",
			"type": "shell",
			"command": "echo '[INFO] Setting up container environment...' && docker compose exec -t dev bash .devcontainer/scripts/setup/init.sh || (echo '[FATAL] Container setup failed' && exit 1)",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Container: Verify Setup",
			"type": "shell",
			"command": "echo '[INFO] Verifying container setup...' && docker compose exec -t dev bash .devcontainer/scripts/checks/readiness.sh || (echo '[FATAL] Container verification failed' && exit 1)",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Container: Force Precompile",
			"type": "shell",
			"command": "echo '[INFO] Forcing precompile in container...' && docker compose exec -t dev bash -c 'FORCE_PRECOMPILE=1 bash .devcontainer/scripts/precompile/trigger.sh' || (echo '[FATAL] Container precompile failed' && exit 1)",
			"group": "build",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Container: Check GPU Status",
			"type": "shell",
			"command": "echo '[INFO] Checking container GPU status...' && docker compose exec -t dev bash .devcontainer/scripts/checks/gpu-check.sh || (echo '[WARNING] No GPU detected in container' && exit 0)",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Container: Run Azure Check",
			"type": "shell",
			"command": "echo '[INFO] Running Azure check in container...' && docker compose exec -t dev bash .devcontainer/scripts/checks/azure-check.sh || (echo '[FATAL] Azure check failed' && exit 1)",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Container: Execute Command",
			"type": "shell",
			"command": "echo '[INFO] Executing command in container...' && docker compose exec -t dev bash -c '${input:containerCommand}' || (echo '[FATAL] Container command failed' && exit 1)",
			"group": "none",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		}
	],
	"inputs": [
		{
			"id": "containerCommand",
			"description": "Command to execute in container",
			"default": "echo 'Hello from container'",
			"type": "promptString"
		}
	]
}